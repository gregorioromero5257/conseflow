webpackJsonp([2],{

/***/ 481:
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var normalizeComponent = __webpack_require__(14)
/* script */
var __vue_script__ = __webpack_require__(678)
/* template */
var __vue_template__ = __webpack_require__(679)
/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources/assets/js/components/TI/Inventario/Herramienta.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-10477dab", Component.options)
  } else {
    hotAPI.reload("data-v-10477dab", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),

/***/ 482:
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var normalizeComponent = __webpack_require__(14)
/* script */
var __vue_script__ = __webpack_require__(680)
/* template */
var __vue_template__ = __webpack_require__(681)
/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources/assets/js/components/TI/Catalogos/TipoSW.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-fdbb7f06", Component.options)
  } else {
    hotAPI.reload("data-v-fdbb7f06", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),

/***/ 483:
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var normalizeComponent = __webpack_require__(14)
/* script */
var __vue_script__ = __webpack_require__(682)
/* template */
var __vue_template__ = __webpack_require__(683)
/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources/assets/js/components/TI/Catalogos/TipoEquipo.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-77b0a278", Component.options)
  } else {
    hotAPI.reload("data-v-77b0a278", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),

/***/ 484:
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var normalizeComponent = __webpack_require__(14)
/* script */
var __vue_script__ = __webpack_require__(684)
/* template */
var __vue_template__ = __webpack_require__(685)
/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources/assets/js/components/TI/Catalogos/Clasificacion.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-18a17ebf", Component.options)
  } else {
    hotAPI.reload("data-v-18a17ebf", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),

/***/ 485:
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var normalizeComponent = __webpack_require__(14)
/* script */
var __vue_script__ = __webpack_require__(686)
/* template */
var __vue_template__ = __webpack_require__(687)
/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources/assets/js/components/TI/Catalogos/Accesorio.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-9e72743a", Component.options)
  } else {
    hotAPI.reload("data-v-9e72743a", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),

/***/ 486:
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var normalizeComponent = __webpack_require__(14)
/* script */
var __vue_script__ = __webpack_require__(688)
/* template */
var __vue_template__ = __webpack_require__(689)
/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources/assets/js/components/TI/Catalogos/TipoServicio.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7be62d4f", Component.options)
  } else {
    hotAPI.reload("data-v-7be62d4f", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),

/***/ 490:
/***/ (function(module, exports) {

module.exports = function () {
  return {
    dateColumns: [],
    listColumns: {},
    datepickerOptions: {
      locale: {
        cancelLabel: 'Clear'
      }
    },
    datepickerPerColumnOptions: {},
    initialPage: 1,
    perPage: 10,
    perPageValues: [10, 25, 50, 100],
    groupBy: false,
    collapseGroups: false,
    destroyEventBus: false,
    sendEmptyFilters: false,
    params: {},
    sortable: true,
    filterable: true,
    groupMeta: [],
    initFilters: {},
    customFilters: [],
    templates: {},
    debounce: 250,
    dateFormat: "DD/MM/YYYY",
    dateFormatPerColumn: {},
    toMomentFormat: false,
    skin: 'table table-striped table-bordered table-hover table-sm',
    skinBusqueda: 'table table-striped table-bordered table-hover table-sm busqueda',
    columnsDisplay: {},
    columnsDropdown: false,
    texts: {
      count: "Mostrando del {from} al  {to} de {count} registros|{count} registros|Un registro",
      first: 'Primero',
      last: 'Ultimo',
      filter: "Buscar:",
      filterPlaceholder: "Buscar...",
      limit: "Registros:",
      page: "Pagina:",
      noResults: "No se encontraron registros",
      filterBy: "Filtrar por {column}",
      loading: 'Cargando...',
      defaultOption: 'Seleccionar {column}',
      columns: 'Columnas'
    },
    sortIcon: {
      base: 'fa', up: 'fa-chevron-up', down: 'fa-chevron-down', is: 'fa-sort'
    },
    sortingAlgorithm: function sortingAlgorithm(data, column) {
      return data.sort(this.getSortFn(column));
    },

    customSorting: {},
    multiSorting: {},
    clientMultiSorting: true,
    serverMultiSorting: false,
    filterByColumn: false,
    highlightMatches: false,
    orderBy: false,
    descOrderColumns: [],
    footerHeadings: false,
    headings: {},
    headingsTooltips: {},
    pagination: {
      dropdown: false,
      chunk: 10,
      edge: false,
      align: 'center',
      nav: 'fixed'
    },
    childRow: false,
    childRowTogglerFirst: true,
    uniqueKey: 'id',
    requestFunction: false,
    requestAdapter: function requestAdapter(data) {
      return data;
    },
    responseAdapter: function responseAdapter(resp) {

      var data = this.getResponseData(resp);

      return {
        data: data.data,
        count: data.count
      };
    },
    requestKeys: {
      query: 'query',
      limit: 'limit',
      orderBy: 'orderBy',
      ascending: 'ascending',
      page: 'page',
      byColumn: 'byColumn'
    },
    rowClassCallback: false,
    preserveState: false,
    saveState: false,
    storage: 'local',
    columnsClasses: {},
    columnCondicion: [{
      id: 1,
      text: 'Activo'
    }, {
      id: 0,
      text: 'Desactivado'
    }]
  };
};

/***/ }),

/***/ 491:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* harmony default export */ __webpack_exports__["a"] = ({
    scrollMeTo: function scrollMeTo(tv, refName) {
        var element = tv.$refs[refName];
        var top = element.offsetTop;
        window.scrollTo(0, top);
    },
    resetObject: function resetObject(obj) {
        for (var key in obj) {
            if (typeof obj[key] === 'string') obj[key] = '';else if (typeof obj[key] === 'number') obj[key] = 0;else if (_typeof(obj[key]) === undefined) obj[key] = null;else if (_typeof(obj[key]) === 'object') obj[key] = null;
        }
    }
});

/***/ }),

/***/ 678:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__ = __webpack_require__(491);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var config = __webpack_require__(490).call(this);

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        var _options;

        return {
            url: '/herramienta',
            herramienta: {
                id: 0,
                descripcion: '',
                cantidad: 0,
                marca: '',
                unidad: ''
            },
            modal: 0,
            tituloModal: '',
            tipoAccion: 0,
            isLoading: false,
            columns: ['id', 'descripcion', 'cantidad', 'marca', 'unidad'],
            tableData: [],
            options: (_options = {
                headings: {
                    descripcion: 'descripcion',
                    cantidad: 'cantidad',
                    marca: 'marca',
                    unidad: 'unidad'
                },
                perPage: 10,
                perPageValues: [],
                skin: config.skin,
                sortIcon: config.sortIcon,
                sortable: ['descripcion']
            }, _defineProperty(_options, 'sortable', ['marca']), _defineProperty(_options, 'filterable', ['descripcion']), _defineProperty(_options, 'filterByColumn', true), _defineProperty(_options, 'texts', config.texts), _options)
        };
    },

    computed: {},
    methods: {
        getData: function getData() {
            var me = this;
            axios.get(me.url).then(function (response) {
                me.tableData = response.data;
            }).catch(function (error) {
                console.log(error);
            });
        },
        guardarHerramienta: function guardarHerramienta(nuevo) {
            var _this = this;

            this.$validator.validate().then(function (result) {
                if (result) {
                    _this.isLoading = true;
                    var me = _this;
                    axios({
                        method: nuevo ? 'POST' : 'PUT',
                        url: nuevo ? me.url : me.url + '/' + _this.herramienta.id,
                        data: {
                            'unidad': _this.herramienta.unidad,
                            'marca': _this.herramienta.marca,
                            'cantidad': _this.herramienta.cantidad,
                            'descripcion': _this.herramienta.descripcion,
                            'id': _this.herramienta.id
                        }
                    }).then(function (response) {
                        me.isLoading = false;
                        if (response.data.status) {
                            me.cerrarModal();
                            me.getData();
                            if (!nuevo) {
                                toastr.success('Herramienta Actualizada Correctamente');
                            } else {
                                toastr.success('Herramienta Registrada Correctamente');
                            }
                        } else {
                            swal({
                                type: 'error',
                                html: response.data.errors.join('<br>')
                            });
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            });
        },
        cerrarModal: function cerrarModal() {
            this.modal = 0;
            this.tituloModal = '';
            __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.herramienta);
        },
        abrirModal: function abrirModal(modelo, accion) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            switch (modelo) {
                case "herramienta":
                    {
                        switch (accion) {
                            case 'registrar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Registrar herramienta';
                                    __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.herramienta);
                                    this.tipoAccion = 1;
                                    break;
                                }
                            case 'actualizar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Actualizar herramienta';
                                    this.tipoAccion = 2;
                                    this.herramienta.id = data['id'];
                                    this.herramienta.descripcion = data['descripcion'];
                                    break;
                                }
                        }
                    }
            }
        }
    },
    mounted: function mounted() {
        this.getData();
        this.$root.limpiarDashboard();
    }
});

/***/ }),

/***/ 679:
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("main", { staticClass: "main" }, [
    _c("div", { staticClass: "container-fluid" }, [
      _c("br"),
      _vm._v(" "),
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-header" }, [
          _c("i", { staticClass: "fa fa-align-justify" }),
          _vm._v(" Herramientas\n                "),
          _c(
            "button",
            {
              staticClass: "btn btn-secondary float-sm-right",
              attrs: { type: "button" },
              on: {
                click: function($event) {
                  _vm.abrirModal("herramienta", "registrar")
                }
              }
            },
            [
              _c("i", { staticClass: "icon-plus" }),
              _vm._v(" Nuevo\n                ")
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "card-body" },
          [
            _c("v-client-table", {
              ref: "myTable",
              attrs: {
                columns: _vm.columns,
                data: _vm.tableData,
                options: _vm.options
              },
              scopedSlots: _vm._u([
                {
                  key: "id",
                  fn: function(props) {
                    return [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-warning btn-sm",
                          attrs: { type: "button" },
                          on: {
                            click: function($event) {
                              _vm.abrirModal(
                                "herramienta",
                                "actualizar",
                                props.row
                              )
                            }
                          }
                        },
                        [_c("i", { staticClass: "icon-pencil" })]
                      )
                    ]
                  }
                }
              ])
            })
          ],
          1
        )
      ])
    ]),
    _vm._v(" "),
    _c(
      "div",
      {
        staticClass: "modal fade",
        class: { mostrar: _vm.modal },
        staticStyle: { display: "none" },
        attrs: {
          tabindex: "-1",
          role: "dialog",
          "aria-labelledby": "myModalLabel",
          "aria-hidden": "true"
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "modal-dialog modal-primary modal-lg",
            attrs: { role: "document" }
          },
          [
            _c("div", { staticClass: "modal-content" }, [
              _c(
                "div",
                [
                  _c("vue-element-loading", {
                    attrs: { active: _vm.isLoading }
                  }),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-header" }, [
                    _c("h4", {
                      staticClass: "modal-title",
                      domProps: { textContent: _vm._s(_vm.tituloModal) }
                    }),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "close",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [
                        _c("span", { attrs: { "aria-hidden": "true" } }, [
                          _vm._v("×")
                        ])
                      ]
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-body" }, [
                    _c("input", { attrs: { type: "hidden", name: "id" } }),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "descripcion" }
                        },
                        [_vm._v("Descripción")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.herramienta.descripcion,
                              expression: "herramienta.descripcion"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "descripcion",
                            placeholder: "Descripción de la herramienta",
                            autocomplete: "off",
                            id: "descripcion"
                          },
                          domProps: { value: _vm.herramienta.descripcion },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.herramienta,
                                "descripcion",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("descripcion")))
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "cantidad" }
                        },
                        [_vm._v("Cantidad")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.herramienta.cantidad,
                              expression: "herramienta.cantidad"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "cantidad",
                            placeholder: "Cantidad",
                            autocomplete: "off",
                            id: "cantidad"
                          },
                          domProps: { value: _vm.herramienta.cantidad },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.herramienta,
                                "cantidad",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("cantidad")))
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "marca" }
                        },
                        [_vm._v("Marca")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.herramienta.marca,
                              expression: "herramienta.marca"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "marca",
                            placeholder: "Marca",
                            autocomplete: "off",
                            id: "marca"
                          },
                          domProps: { value: _vm.herramienta.marca },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.herramienta,
                                "marca",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("marca")))
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "unidad" }
                        },
                        [_vm._v("Unidad")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.herramienta.unidad,
                              expression: "herramienta.unidad"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "unidad",
                            placeholder: "Unidad",
                            autocomplete: "off",
                            id: "unidad"
                          },
                          domProps: { value: _vm.herramienta.unidad },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.herramienta,
                                "unidad",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("unidad")))
                        ])
                      ])
                    ])
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-footer" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-secondary",
                        attrs: { type: "button" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [_vm._v("Cerrar")]
                    ),
                    _vm._v(" "),
                    _vm.tipoAccion == 1
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarHerramienta(1)
                              }
                            }
                          },
                          [_vm._v("Guardar")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.tipoAccion == 2
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarHerramienta(0)
                              }
                            }
                          },
                          [_vm._v("Actualizar")]
                        )
                      : _vm._e()
                  ])
                ],
                1
              )
            ])
          ]
        )
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-10477dab", module.exports)
  }
}

/***/ }),

/***/ 680:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__ = __webpack_require__(491);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var config = __webpack_require__(490).call(this);

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            url: '/tiposw',
            tipoSW: {
                id: 0,
                nombre: ''
            },
            modal: 0,
            tituloModal: '',
            tipoAccion: 0,
            isLoading: false,
            columns: ['id', 'nombre'],
            tableData: [],
            options: {
                headings: {
                    nombre: 'Nombre',
                    id: 'Acción'
                },
                perPage: 10,
                perPageValues: [],
                skin: config.skin,
                sortIcon: config.sortIcon,
                sortable: ['nombre'],
                filterable: ['nombre'],
                filterByColumn: true,
                texts: config.texts
            }
        };
    },

    computed: {},
    methods: {
        getData: function getData() {
            var me = this;
            axios.get(me.url).then(function (response) {
                me.tableData = response.data;
            }).catch(function (error) {
                console.log(error);
            });
        },
        guardarTipoSW: function guardarTipoSW(nuevo) {
            var _this = this;

            this.$validator.validate().then(function (result) {
                if (result) {
                    _this.isLoading = true;
                    var me = _this;
                    axios({
                        method: nuevo ? 'POST' : 'PUT',
                        url: nuevo ? me.url : me.url + '/' + _this.id,
                        data: {
                            'nombre': _this.tipoSW.nombre,
                            'id': _this.tipoSW.id
                        }
                    }).then(function (response) {
                        me.isLoading = false;
                        if (response.data.status) {
                            me.cerrarModal();
                            me.getData();
                            if (!nuevo) {
                                toastr.success('Tipo de SW actualizado correctamente');
                            } else {
                                toastr.success('Tipo de SW registrado correctamente');
                            }
                        } else {
                            swal({
                                type: 'error',
                                html: response.data.errors.join('<br>')
                            });
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            });
        },
        cerrarModal: function cerrarModal() {
            this.modal = 0;
            this.tituloModal = '';
            __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.tipoSW);
        },
        abrirModal: function abrirModal(modelo, accion) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            switch (modelo) {
                case "tipoSW":
                    {
                        switch (accion) {
                            case 'registrar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Registrar tipo de SW';
                                    __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.tipoSW);
                                    this.tipoAccion = 1;
                                    break;
                                }
                            case 'actualizar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Actualizar tipo de SW';
                                    this.tipoAccion = 2;
                                    this.tipoSW.id = data['id'];
                                    this.tipoSW.nombre = data['nombre'];
                                    break;
                                }
                        }
                    }
            }
        }
    },
    mounted: function mounted() {
        this.getData();
        this.$root.limpiarDashboard();
    }
});

/***/ }),

/***/ 681:
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("main", { staticClass: "main" }, [
    _c("div", { staticClass: "container-fluid" }, [
      _c("br"),
      _vm._v(" "),
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-header" }, [
          _c("i", { staticClass: "fa fa-align-justify" }),
          _vm._v(" Tipo de Software\n                "),
          _c(
            "button",
            {
              staticClass: "btn btn-secondary float-sm-right",
              attrs: { type: "button" },
              on: {
                click: function($event) {
                  _vm.abrirModal("tipoSW", "registrar")
                }
              }
            },
            [
              _c("i", { staticClass: "icon-plus" }),
              _vm._v(" Nuevo\n                ")
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "card-body" },
          [
            _c("v-client-table", {
              ref: "myTable",
              attrs: {
                columns: _vm.columns,
                data: _vm.tableData,
                options: _vm.options
              },
              scopedSlots: _vm._u([
                {
                  key: "id",
                  fn: function(props) {
                    return [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-warning btn-sm",
                          attrs: { type: "button" },
                          on: {
                            click: function($event) {
                              _vm.abrirModal("tipoSW", "actualizar", props.row)
                            }
                          }
                        },
                        [_c("i", { staticClass: "icon-pencil" })]
                      )
                    ]
                  }
                }
              ])
            })
          ],
          1
        )
      ])
    ]),
    _vm._v(" "),
    _c(
      "div",
      {
        staticClass: "modal fade",
        class: { mostrar: _vm.modal },
        staticStyle: { display: "none" },
        attrs: {
          tabindex: "-1",
          role: "dialog",
          "aria-labelledby": "myModalLabel",
          "aria-hidden": "true"
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "modal-dialog modal-primary modal-lg",
            attrs: { role: "document" }
          },
          [
            _c("div", { staticClass: "modal-content" }, [
              _c(
                "div",
                [
                  _c("vue-element-loading", {
                    attrs: { active: _vm.isLoading }
                  }),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-header" }, [
                    _c("h4", {
                      staticClass: "modal-title",
                      domProps: { textContent: _vm._s(_vm.tituloModal) }
                    }),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "close",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [
                        _c("span", { attrs: { "aria-hidden": "true" } }, [
                          _vm._v("×")
                        ])
                      ]
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-body" }, [
                    _c("input", { attrs: { type: "hidden", name: "id" } }),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "nombre" }
                        },
                        [_vm._v("Nombre")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.tipoSW.nombre,
                              expression: "tipoSW.nombre"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "nombre",
                            placeholder: "Nombre del tipo de software",
                            autocomplete: "off",
                            id: "nombre"
                          },
                          domProps: { value: _vm.tipoSW.nombre },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.tipoSW,
                                "nombre",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("nombre")))
                        ])
                      ])
                    ])
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-footer" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-secondary",
                        attrs: { type: "button" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [_vm._v("Cerrar")]
                    ),
                    _vm._v(" "),
                    _vm.tipoAccion == 1
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarTipoSW(1)
                              }
                            }
                          },
                          [_vm._v("Guardar")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.tipoAccion == 2
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarTipoSW(0)
                              }
                            }
                          },
                          [_vm._v("Actualizar")]
                        )
                      : _vm._e()
                  ])
                ],
                1
              )
            ])
          ]
        )
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-fdbb7f06", module.exports)
  }
}

/***/ }),

/***/ 682:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__ = __webpack_require__(491);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var config = __webpack_require__(490).call(this);

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            url: '/tipoequipo',
            tipoEquipo: {
                id: 0,
                nombre: ''
            },
            modal: 0,
            tituloModal: '',
            tipoAccion: 0,
            isLoading: false,
            columns: ['id', 'nombre'],
            tableData: [],
            options: {
                headings: {
                    nombre: 'Nombre',
                    id: 'Acción'
                },
                perPage: 10,
                perPageValues: [],
                skin: config.skin,
                sortIcon: config.sortIcon,
                sortable: ['nombre'],
                filterable: ['nombre'],
                filterByColumn: true,
                texts: config.texts
            }
        };
    },

    computed: {},
    methods: {
        getData: function getData() {
            var me = this;
            axios.get(me.url).then(function (response) {
                me.tableData = response.data;
            }).catch(function (error) {
                console.log(error);
            });
        },
        guardarTipoEquipo: function guardarTipoEquipo(nuevo) {
            var _this = this;

            this.$validator.validate().then(function (result) {
                if (result) {
                    _this.isLoading = true;
                    var me = _this;
                    axios({
                        method: nuevo ? 'POST' : 'PUT',
                        url: nuevo ? me.url : me.url + '/' + _this.id,
                        data: {
                            'nombre': _this.tipoEquipo.nombre,
                            'id': _this.tipoEquipo.id
                        }
                    }).then(function (response) {
                        me.isLoading = false;
                        if (response.data.status) {
                            me.cerrarModal();
                            me.getData();
                            if (!nuevo) {
                                toastr.success('Tipo de equipo actualizado correctamente');
                            } else {
                                toastr.success('Tipo de equipo registrado correctamente');
                            }
                        } else {
                            swal({
                                type: 'error',
                                html: response.data.errors.join('<br>')
                            });
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            });
        },
        cerrarModal: function cerrarModal() {
            this.modal = 0;
            this.tituloModal = '';
            __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.tipoEquipo);
        },
        abrirModal: function abrirModal(modelo, accion) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            switch (modelo) {
                case "tipoEquipo":
                    {
                        switch (accion) {
                            case 'registrar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Registrar tipo de equipo';
                                    __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.tipoEquipo);
                                    this.tipoAccion = 1;
                                    break;
                                }
                            case 'actualizar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Actualizar tipo de equipo';
                                    this.tipoAccion = 2;
                                    this.tipoEquipo.id = data['id'];
                                    this.tipoEquipo.nombre = data['nombre'];
                                    break;
                                }
                        }
                    }
            }
        }
    },
    mounted: function mounted() {
        this.getData();
        this.$root.limpiarDashboard();
    }
});

/***/ }),

/***/ 683:
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("main", { staticClass: "main" }, [
    _c("div", { staticClass: "container-fluid" }, [
      _c("br"),
      _vm._v(" "),
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-header" }, [
          _c("i", { staticClass: "fa fa-align-justify" }),
          _vm._v(" Tipo de Equipo\n                "),
          _c(
            "button",
            {
              staticClass: "btn btn-secondary float-sm-right",
              attrs: { type: "button" },
              on: {
                click: function($event) {
                  _vm.abrirModal("tipoEquipo", "registrar")
                }
              }
            },
            [
              _c("i", { staticClass: "icon-plus" }),
              _vm._v(" Nuevo\n                ")
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "card-body" },
          [
            _c("v-client-table", {
              ref: "myTable",
              attrs: {
                columns: _vm.columns,
                data: _vm.tableData,
                options: _vm.options
              },
              scopedSlots: _vm._u([
                {
                  key: "id",
                  fn: function(props) {
                    return [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-warning btn-sm",
                          attrs: { type: "button" },
                          on: {
                            click: function($event) {
                              _vm.abrirModal(
                                "tipoEquipo",
                                "actualizar",
                                props.row
                              )
                            }
                          }
                        },
                        [_c("i", { staticClass: "icon-pencil" })]
                      )
                    ]
                  }
                }
              ])
            })
          ],
          1
        )
      ])
    ]),
    _vm._v(" "),
    _c(
      "div",
      {
        staticClass: "modal fade",
        class: { mostrar: _vm.modal },
        staticStyle: { display: "none" },
        attrs: {
          tabindex: "-1",
          role: "dialog",
          "aria-labelledby": "myModalLabel",
          "aria-hidden": "true"
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "modal-dialog modal-primary modal-lg",
            attrs: { role: "document" }
          },
          [
            _c("div", { staticClass: "modal-content" }, [
              _c(
                "div",
                [
                  _c("vue-element-loading", {
                    attrs: { active: _vm.isLoading }
                  }),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-header" }, [
                    _c("h4", {
                      staticClass: "modal-title",
                      domProps: { textContent: _vm._s(_vm.tituloModal) }
                    }),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "close",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [
                        _c("span", { attrs: { "aria-hidden": "true" } }, [
                          _vm._v("×")
                        ])
                      ]
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-body" }, [
                    _c("input", { attrs: { type: "hidden", name: "id" } }),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "nombre" }
                        },
                        [_vm._v("Nombre")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.tipoEquipo.nombre,
                              expression: "tipoEquipo.nombre"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "nombre",
                            placeholder: "Nombre del tipo de equipo",
                            autocomplete: "off",
                            id: "nombre"
                          },
                          domProps: { value: _vm.tipoEquipo.nombre },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.tipoEquipo,
                                "nombre",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("nombre")))
                        ])
                      ])
                    ])
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-footer" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-secondary",
                        attrs: { type: "button" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [_vm._v("Cerrar")]
                    ),
                    _vm._v(" "),
                    _vm.tipoAccion == 1
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarTipoEquipo(1)
                              }
                            }
                          },
                          [_vm._v("Guardar")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.tipoAccion == 2
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarTipoEquipo(0)
                              }
                            }
                          },
                          [_vm._v("Actualizar")]
                        )
                      : _vm._e()
                  ])
                ],
                1
              )
            ])
          ]
        )
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-77b0a278", module.exports)
  }
}

/***/ }),

/***/ 684:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__ = __webpack_require__(491);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var config = __webpack_require__(490).call(this);

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            url: '/clasificacion',
            clasificacion: {
                id: 0,
                nombre: ''
            },
            modal: 0,
            tituloModal: '',
            tipoAccion: 0,
            isLoading: false,
            columns: ['id', 'nombre'],
            tableData: [],
            options: {
                headings: {
                    nombre: 'Nombre',
                    id: 'Acción'
                },
                perPage: 10,
                perPageValues: [],
                skin: config.skin,
                sortIcon: config.sortIcon,
                sortable: ['nombre'],
                filterable: ['nombre'],
                filterByColumn: true,
                texts: config.texts
            }
        };
    },

    computed: {},
    methods: {
        getData: function getData() {
            var me = this;
            axios.get(me.url).then(function (response) {
                me.tableData = response.data;
            }).catch(function (error) {
                console.log(error);
            });
        },
        guardarClasificacion: function guardarClasificacion(nuevo) {
            var _this = this;

            this.$validator.validate().then(function (result) {
                if (result) {
                    _this.isLoading = true;
                    var me = _this;
                    axios({
                        method: nuevo ? 'POST' : 'PUT',
                        url: nuevo ? me.url : me.url + '/' + _this.id,
                        data: {
                            'nombre': _this.clasificacion.nombre,
                            'id': _this.clasificacion.id
                        }
                    }).then(function (response) {
                        me.isLoading = false;
                        if (response.data.status) {
                            me.cerrarModal();
                            me.getData();
                            if (!nuevo) {
                                toastr.success('Clasificación actualizada correctamente');
                            } else {
                                toastr.success('Clasificación registrada correctamente');
                            }
                        } else {
                            swal({
                                type: 'error',
                                html: response.data.errors.join('<br>')
                            });
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            });
        },
        cerrarModal: function cerrarModal() {
            this.modal = 0;
            this.tituloModal = '';
            __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.clasificacion);
        },
        abrirModal: function abrirModal(modelo, accion) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            switch (modelo) {
                case "clasificacion":
                    {
                        switch (accion) {
                            case 'registrar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Registrar clasificación';
                                    __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.clasificación);
                                    this.tipoAccion = 1;
                                    break;
                                }
                            case 'actualizar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Actualizar clasificación';
                                    this.tipoAccion = 2;
                                    this.clasificacion.id = data['id'];
                                    this.clasificacion.nombre = data['nombre'];
                                    break;
                                }
                        }
                    }
            }
        }
    },
    mounted: function mounted() {
        this.getData();
        this.$root.limpiarDashboard();
    }
});

/***/ }),

/***/ 685:
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("main", { staticClass: "main" }, [
    _c("div", { staticClass: "container-fluid" }, [
      _c("br"),
      _vm._v(" "),
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-header" }, [
          _c("i", { staticClass: "fa fa-align-justify" }),
          _vm._v(" Clasificación de HW \n                "),
          _c(
            "button",
            {
              staticClass: "btn btn-secondary float-sm-right",
              attrs: { type: "button" },
              on: {
                click: function($event) {
                  _vm.abrirModal("clasificacion", "registrar")
                }
              }
            },
            [
              _c("i", { staticClass: "icon-plus" }),
              _vm._v(" Nuevo\n                ")
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "card-body" },
          [
            _c("v-client-table", {
              ref: "myTable",
              attrs: {
                columns: _vm.columns,
                data: _vm.tableData,
                options: _vm.options
              },
              scopedSlots: _vm._u([
                {
                  key: "id",
                  fn: function(props) {
                    return [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-warning btn-sm",
                          attrs: { type: "button" },
                          on: {
                            click: function($event) {
                              _vm.abrirModal(
                                "clasificacion",
                                "actualizar",
                                props.row
                              )
                            }
                          }
                        },
                        [_c("i", { staticClass: "icon-pencil" })]
                      )
                    ]
                  }
                }
              ])
            })
          ],
          1
        )
      ])
    ]),
    _vm._v(" "),
    _c(
      "div",
      {
        staticClass: "modal fade",
        class: { mostrar: _vm.modal },
        staticStyle: { display: "none" },
        attrs: {
          tabindex: "-1",
          role: "dialog",
          "aria-labelledby": "myModalLabel",
          "aria-hidden": "true"
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "modal-dialog modal-primary modal-lg",
            attrs: { role: "document" }
          },
          [
            _c("div", { staticClass: "modal-content" }, [
              _c(
                "div",
                [
                  _c("vue-element-loading", {
                    attrs: { active: _vm.isLoading }
                  }),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-header" }, [
                    _c("h4", {
                      staticClass: "modal-title",
                      domProps: { textContent: _vm._s(_vm.tituloModal) }
                    }),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "close",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [
                        _c("span", { attrs: { "aria-hidden": "true" } }, [
                          _vm._v("×")
                        ])
                      ]
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-body" }, [
                    _c("input", { attrs: { type: "hidden", name: "id" } }),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "nombre" }
                        },
                        [_vm._v("Nombre")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.clasificacion.nombre,
                              expression: "clasificacion.nombre"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "nombre",
                            placeholder: "Nombre de la clasificación",
                            autocomplete: "off",
                            id: "nombre"
                          },
                          domProps: { value: _vm.clasificacion.nombre },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.clasificacion,
                                "nombre",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("nombre")))
                        ])
                      ])
                    ])
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-footer" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-secondary",
                        attrs: { type: "button" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [_vm._v("Cerrar")]
                    ),
                    _vm._v(" "),
                    _vm.tipoAccion == 1
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarClasificacion(1)
                              }
                            }
                          },
                          [_vm._v("Guardar")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.tipoAccion == 2
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarClasificacion(0)
                              }
                            }
                          },
                          [_vm._v("Actualizar")]
                        )
                      : _vm._e()
                  ])
                ],
                1
              )
            ])
          ]
        )
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-18a17ebf", module.exports)
  }
}

/***/ }),

/***/ 686:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__ = __webpack_require__(491);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var config = __webpack_require__(490).call(this);

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            url: '/accesorio',
            accesorio: {
                id: 0,
                tipo: '',
                etiqueta: '',
                ns: ''
            },
            modal: 0,
            tituloModal: '',
            tipoAccion: 0,
            isLoading: false,
            columns: ['id', 'tipo', 'etiqueta', 'ns'],
            tableData: [],
            options: {
                headings: {
                    ns: 'Número de serie',
                    etiqueta: 'Etiqueta',
                    tipo: 'Tipo',
                    id: 'Acción'
                },
                perPage: 10,
                perPageValues: [],
                skin: config.skin,
                sortIcon: config.sortIcon,
                sortable: ['tipo'],
                filterable: ['tipo'],
                filterByColumn: true,
                texts: config.texts
            }
        };
    },

    computed: {},
    methods: {
        getData: function getData() {
            var me = this;
            axios.get(me.url).then(function (response) {
                me.tableData = response.data;
            }).catch(function (error) {
                console.log(error);
            });
        },
        guardarAccesorio: function guardarAccesorio(nuevo) {
            var _this = this;

            this.$validator.validate().then(function (result) {
                if (result) {
                    _this.isLoading = true;
                    var me = _this;
                    axios({
                        method: nuevo ? 'POST' : 'PUT',
                        url: nuevo ? me.url : me.url + '/' + _this.id,
                        data: {
                            'ns': _this.accesorio.ns,
                            'etiqueta': _this.accesorio.etiqueta,
                            'tipo': _this.accesorio.tipo,
                            'id': _this.accesorio.id
                        }
                    }).then(function (response) {
                        me.isLoading = false;
                        if (response.data.status) {
                            me.cerrarModal();
                            me.getData();
                            if (!nuevo) {
                                toastr.success('Accesorio actualizado correctamente');
                            } else {
                                toastr.success('Accesorio registrado correctamente');
                            }
                        } else {
                            swal({
                                type: 'error',
                                html: response.data.errors.join('<br>')
                            });
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            });
        },
        cerrarModal: function cerrarModal() {
            this.modal = 0;
            this.tituloModal = '';
            __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.accesorio);
        },
        abrirModal: function abrirModal(modelo, accion) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            switch (modelo) {
                case "accesorio":
                    {
                        switch (accion) {
                            case 'registrar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Registrar accesorio';
                                    __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.accesorio);
                                    this.tipoAccion = 1;
                                    break;
                                }
                            case 'actualizar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Actualizar accesorio';
                                    this.tipoAccion = 2;
                                    this.accesorio.id = data['id'];
                                    this.accesorio.tipo = data['tipo'];
                                    this.accesorio.etiqueta = data['etiqueta'];
                                    this.accesorio.ns = data['ns'];
                                    break;
                                }
                        }
                    }
            }
        }
    },
    mounted: function mounted() {
        this.getData();
        this.$root.limpiarDashboard();
    }
});

/***/ }),

/***/ 687:
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("main", { staticClass: "main" }, [
    _c("div", { staticClass: "container-fluid" }, [
      _c("br"),
      _vm._v(" "),
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-header" }, [
          _c("i", { staticClass: "fa fa-align-justify" }),
          _vm._v(" Accesorios\n                "),
          _c(
            "button",
            {
              staticClass: "btn btn-secondary float-sm-right",
              attrs: { type: "button" },
              on: {
                click: function($event) {
                  _vm.abrirModal("accesorio", "registrar")
                }
              }
            },
            [
              _c("i", { staticClass: "icon-plus" }),
              _vm._v(" Nuevo\n                ")
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "card-body" },
          [
            _c("v-client-table", {
              ref: "myTable",
              attrs: {
                columns: _vm.columns,
                data: _vm.tableData,
                options: _vm.options
              },
              scopedSlots: _vm._u([
                {
                  key: "id",
                  fn: function(props) {
                    return [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-warning btn-sm",
                          attrs: { type: "button" },
                          on: {
                            click: function($event) {
                              _vm.abrirModal(
                                "accesorio",
                                "actualizar",
                                props.row
                              )
                            }
                          }
                        },
                        [_c("i", { staticClass: "icon-pencil" })]
                      )
                    ]
                  }
                }
              ])
            })
          ],
          1
        )
      ])
    ]),
    _vm._v(" "),
    _c(
      "div",
      {
        staticClass: "modal fade",
        class: { mostrar: _vm.modal },
        staticStyle: { display: "none" },
        attrs: {
          tabindex: "-1",
          role: "dialog",
          "aria-labelledby": "myModalLabel",
          "aria-hidden": "true"
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "modal-dialog modal-primary modal-lg",
            attrs: { role: "document" }
          },
          [
            _c("div", { staticClass: "modal-content" }, [
              _c(
                "div",
                [
                  _c("vue-element-loading", {
                    attrs: { active: _vm.isLoading }
                  }),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-header" }, [
                    _c("h4", {
                      staticClass: "modal-title",
                      domProps: { textContent: _vm._s(_vm.tituloModal) }
                    }),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "close",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [
                        _c("span", { attrs: { "aria-hidden": "true" } }, [
                          _vm._v("×")
                        ])
                      ]
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-body" }, [
                    _c("input", { attrs: { type: "hidden", name: "id" } }),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "tipo" }
                        },
                        [_vm._v("Nombre")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.accesorio.tipo,
                              expression: "accesorio.tipo"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "tipo",
                            placeholder: "Tipo de accesorio",
                            autocomplete: "off",
                            id: "nombre"
                          },
                          domProps: { value: _vm.accesorio.tipo },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.accesorio,
                                "tipo",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("tipo")))
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "etiqueta" }
                        },
                        [_vm._v("Etiqueta")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            { name: "validate", rawName: "v-validate" },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.accesorio.etiqueta,
                              expression: "accesorio.etiqueta"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "etiqueta",
                            placeholder: "Etiqueta",
                            autocomplete: "off",
                            id: "razon"
                          },
                          domProps: { value: _vm.accesorio.etiqueta },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.accesorio,
                                "etiqueta",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("etiqueta")))
                        ])
                      ])
                    ]),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "ns" }
                        },
                        [_vm._v("Número de Serie")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            { name: "validate", rawName: "v-validate" },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.accesorio.ns,
                              expression: "accesorio.ns"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "ns",
                            placeholder: "Número de serie",
                            autocomplete: "off",
                            id: "razon"
                          },
                          domProps: { value: _vm.accesorio.ns },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(_vm.accesorio, "ns", $event.target.value)
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("ns")))
                        ])
                      ])
                    ])
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-footer" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-secondary",
                        attrs: { type: "button" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [_vm._v("Cerrar")]
                    ),
                    _vm._v(" "),
                    _vm.tipoAccion == 1
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarAccesorio(1)
                              }
                            }
                          },
                          [_vm._v("Guardar")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.tipoAccion == 2
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarAccesorio(0)
                              }
                            }
                          },
                          [_vm._v("Actualizar")]
                        )
                      : _vm._e()
                  ])
                ],
                1
              )
            ])
          ]
        )
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-9e72743a", module.exports)
  }
}

/***/ }),

/***/ 688:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__ = __webpack_require__(491);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var config = __webpack_require__(490).call(this);

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            url: '/tiposervicio',
            tipoServicio: {
                id: 0,
                nombre: ''
            },
            modal: 0,
            tituloModal: '',
            tipoAccion: 0,
            isLoading: false,
            columns: ['id', 'nombre'],
            tableData: [],
            options: {
                headings: {
                    nombre: 'Nombre',
                    id: 'Acción'
                },
                perPage: 10,
                perPageValues: [],
                skin: config.skin,
                sortIcon: config.sortIcon,
                sortable: ['nombre'],
                filterable: ['nombre'],
                filterByColumn: true,
                texts: config.texts
            }
        };
    },

    computed: {},
    methods: {
        getData: function getData() {
            var me = this;
            axios.get(me.url).then(function (response) {
                me.tableData = response.data;
            }).catch(function (error) {
                console.log(error);
            });
        },
        guardarTipoServicio: function guardarTipoServicio(nuevo) {
            var _this = this;

            this.$validator.validate().then(function (result) {
                if (result) {
                    _this.isLoading = true;
                    var me = _this;
                    axios({
                        method: nuevo ? 'POST' : 'PUT',
                        url: nuevo ? me.url : me.url + '/' + _this.id,
                        data: {
                            'nombre': _this.tipoServicio.nombre,
                            'id': _this.tipoServicio.id
                        }
                    }).then(function (response) {
                        me.isLoading = false;
                        if (response.data.status) {
                            me.cerrarModal();
                            me.getData();
                            if (!nuevo) {
                                toastr.success('Tipo de servicio actualizado correctamente');
                            } else {
                                toastr.success('Tipo de servicio registrado correctamente');
                            }
                        } else {
                            swal({
                                type: 'error',
                                html: response.data.errors.join('<br>')
                            });
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            });
        },
        cerrarModal: function cerrarModal() {
            this.modal = 0;
            this.tituloModal = '';
            __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.tipoSW);
        },
        abrirModal: function abrirModal(modelo, accion) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            switch (modelo) {
                case "tipoServicio":
                    {
                        switch (accion) {
                            case 'registrar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Registrar tipo de servicio';
                                    __WEBPACK_IMPORTED_MODULE_0__Herramientas_utilerias_js__["a" /* default */].resetObject(this.tipoServicio);
                                    this.tipoAccion = 1;
                                    break;
                                }
                            case 'actualizar':
                                {
                                    this.modal = 1;
                                    this.tituloModal = 'Actualizar tipo de servicio';
                                    this.tipoAccion = 2;
                                    this.tipoServicio.id = data['id'];
                                    this.tipoServicio.nombre = data['nombre'];
                                    break;
                                }
                        }
                    }
            }
        }
    },
    mounted: function mounted() {
        this.getData();
        this.$root.limpiarDashboard();
    }
});

/***/ }),

/***/ 689:
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("main", { staticClass: "main" }, [
    _c("div", { staticClass: "container-fluid" }, [
      _c("br"),
      _vm._v(" "),
      _c("div", { staticClass: "card" }, [
        _c("div", { staticClass: "card-header" }, [
          _c("i", { staticClass: "fa fa-align-justify" }),
          _vm._v(" Tipo de Software\n                "),
          _c(
            "button",
            {
              staticClass: "btn btn-secondary float-sm-right",
              attrs: { type: "button" },
              on: {
                click: function($event) {
                  _vm.abrirModal("tipoServicio", "registrar")
                }
              }
            },
            [
              _c("i", { staticClass: "icon-plus" }),
              _vm._v(" Nuevo\n                ")
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          { staticClass: "card-body" },
          [
            _c("v-client-table", {
              ref: "myTable",
              attrs: {
                columns: _vm.columns,
                data: _vm.tableData,
                options: _vm.options
              },
              scopedSlots: _vm._u([
                {
                  key: "id",
                  fn: function(props) {
                    return [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-warning btn-sm",
                          attrs: { type: "button" },
                          on: {
                            click: function($event) {
                              _vm.abrirModal(
                                "tipoServicio",
                                "actualizar",
                                props.row
                              )
                            }
                          }
                        },
                        [_c("i", { staticClass: "icon-pencil" })]
                      )
                    ]
                  }
                }
              ])
            })
          ],
          1
        )
      ])
    ]),
    _vm._v(" "),
    _c(
      "div",
      {
        staticClass: "modal fade",
        class: { mostrar: _vm.modal },
        staticStyle: { display: "none" },
        attrs: {
          tabindex: "-1",
          role: "dialog",
          "aria-labelledby": "myModalLabel",
          "aria-hidden": "true"
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "modal-dialog modal-primary modal-lg",
            attrs: { role: "document" }
          },
          [
            _c("div", { staticClass: "modal-content" }, [
              _c(
                "div",
                [
                  _c("vue-element-loading", {
                    attrs: { active: _vm.isLoading }
                  }),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-header" }, [
                    _c("h4", {
                      staticClass: "modal-title",
                      domProps: { textContent: _vm._s(_vm.tituloModal) }
                    }),
                    _vm._v(" "),
                    _c(
                      "button",
                      {
                        staticClass: "close",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [
                        _c("span", { attrs: { "aria-hidden": "true" } }, [
                          _vm._v("×")
                        ])
                      ]
                    )
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-body" }, [
                    _c("input", { attrs: { type: "hidden", name: "id" } }),
                    _vm._v(" "),
                    _c("div", { staticClass: "form-group row" }, [
                      _c(
                        "label",
                        {
                          staticClass: "col-md-3 form-control-label",
                          attrs: { for: "nombre" }
                        },
                        [_vm._v("Nombre")]
                      ),
                      _vm._v(" "),
                      _c("div", { staticClass: "col-md-9" }, [
                        _c("input", {
                          directives: [
                            {
                              name: "validate",
                              rawName: "v-validate",
                              value: "required",
                              expression: "'required'"
                            },
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.tipoServicio.nombre,
                              expression: "tipoServicio.nombre"
                            }
                          ],
                          staticClass: "form-control",
                          attrs: {
                            type: "text",
                            name: "nombre",
                            placeholder: "Nombre del tipo de servicio",
                            autocomplete: "off",
                            id: "nombre"
                          },
                          domProps: { value: _vm.tipoServicio.nombre },
                          on: {
                            input: function($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(
                                _vm.tipoServicio,
                                "nombre",
                                $event.target.value
                              )
                            }
                          }
                        }),
                        _vm._v(" "),
                        _c("span", { staticClass: "text-danger" }, [
                          _vm._v(_vm._s(_vm.errors.first("nombre")))
                        ])
                      ])
                    ])
                  ]),
                  _vm._v(" "),
                  _c("div", { staticClass: "modal-footer" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-secondary",
                        attrs: { type: "button" },
                        on: {
                          click: function($event) {
                            _vm.cerrarModal()
                          }
                        }
                      },
                      [_vm._v("Cerrar")]
                    ),
                    _vm._v(" "),
                    _vm.tipoAccion == 1
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarTipoServicio(1)
                              }
                            }
                          },
                          [_vm._v("Guardar")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm.tipoAccion == 2
                      ? _c(
                          "button",
                          {
                            staticClass: "btn btn-primary",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.guardarTipoServicio(0)
                              }
                            }
                          },
                          [_vm._v("Actualizar")]
                        )
                      : _vm._e()
                  ])
                ],
                1
              )
            ])
          ]
        )
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-7be62d4f", module.exports)
  }
}

/***/ })

});